{"ast":null,"code":"var _jsxFileName = \"D:\\\\program\\\\java\\\\coursebucket\\\\frontend\\\\src\\\\components\\\\search\\\\filter\\\\Chips.js\";\nimport { Chip, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CustomChip({\n  object,\n  onObjectChange,\n  value = object.title\n}) {\n  function handleDelete() {\n    if (object.type === \"Slider\") {\n      onObjectChange({ ...object,\n        value: [object.min, object.max]\n      });\n    } else {\n      onObjectChange({ ...object,\n        checked: false\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    sm: true,\n    children: /*#__PURE__*/_jsxDEV(Chip, {\n      size: \"medium\",\n      style: {\n        width: \"100%\",\n        marginTop: 5,\n        marginRight: 5\n      },\n      label: value,\n      onDelete: handleDelete,\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_c = CustomChip;\nexport function FilterChips({\n  objects,\n  onObjectsChange\n}) {\n  function handleSliderFilterChange(index, newFilter) {\n    let newObjects = objects.splice(0);\n    newObjects[index] = newFilter;\n    onObjectsChange(newObjects);\n  }\n\n  function handleCategoryFilterChange(index, newFilter) {\n    let newObjects = objects;\n    newObjects[index].items.data = newFilter;\n    onObjectsChange(newObjects);\n  }\n\n  function handleFilterChange(index, newFilter) {\n    let newObjects = objects;\n    newObjects[index].items = newFilter;\n    onObjectsChange(newObjects);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    id: \"chipsContainer\",\n    sm: true,\n    container: true,\n    children: objects.map((filter, index) => {\n      if (filter.type === \"Slider\") {\n        if (filter.min !== filter.value[0] || filter.max != filter.value[1]) return /*#__PURE__*/_jsxDEV(CustomChip, {\n          object: filter,\n          value: \"Showing \" + filter.value[0] + filter.valueType + \" to \" + filter.value[1] + filter.valueType,\n          onObjectChange: newFilter => handleSliderFilterChange(index, newFilter)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 22\n        }, this);\n      } else if (filter.type === \"List\" && filter.title === \"Category\") return /*#__PURE__*/_jsxDEV(GenerateChips, {\n        object: filter.items.data,\n        onObjectChange: newFilter => handleCategoryFilterChange(index, newFilter)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 20\n      }, this);else {\n        return /*#__PURE__*/_jsxDEV(GenerateChips, {\n          object: filter.items,\n          onObjectChange: newFilter => handleFilterChange(index, newFilter)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 20\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_c2 = FilterChips;\n\nfunction GenerateChips({\n  object,\n  onObjectChange\n}) {\n  function handleChange(index, newItem) {\n    let newObject = object;\n    newObject[index] = newItem;\n    onObjectChange(newObject);\n  }\n\n  function handleCategoryChange(index, newItem) {\n    let newObject = object;\n    newObject[index].items = newItem;\n    onObjectChange(newObject);\n  }\n\n  return object.map((item, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [item.checked && /*#__PURE__*/_jsxDEV(CustomChip, {\n      object: item,\n      value: item.title,\n      onObjectChange: newItem => handleChange(index, newItem)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this), item.items !== undefined ? item.items.length !== 0 ? /*#__PURE__*/_jsxDEV(GenerateChips, {\n      object: item.items,\n      onObjectChange: newItem => handleCategoryChange(index, newItem)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }, this) : null : null]\n  }, void 0, true));\n}\n\n_c3 = GenerateChips;\nexport function CategoryChips({\n  object,\n  onObjectChange\n}) {\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    sm: true,\n    children: /*#__PURE__*/_jsxDEV(GenerateChips, {\n      object: object.data,\n      onObjectChange: newData => onObjectChange({ ...object,\n        data: newData\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_c4 = CategoryChips;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CustomChip\");\n$RefreshReg$(_c2, \"FilterChips\");\n$RefreshReg$(_c3, \"GenerateChips\");\n$RefreshReg$(_c4, \"CategoryChips\");","map":{"version":3,"sources":["D:/program/java/coursebucket/frontend/src/components/search/filter/Chips.js"],"names":["Chip","Grid","React","CustomChip","object","onObjectChange","value","title","handleDelete","type","min","max","checked","width","marginTop","marginRight","FilterChips","objects","onObjectsChange","handleSliderFilterChange","index","newFilter","newObjects","splice","handleCategoryFilterChange","items","data","handleFilterChange","map","filter","valueType","GenerateChips","handleChange","newItem","newObject","handleCategoryChange","item","undefined","length","CategoryChips","newData"],"mappings":"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","sourcesContent":["import { Chip, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction CustomChip({\r\n  object,\r\n  onObjectChange,\r\n  value = object.title,\r\n}) {\r\n  function handleDelete() {\r\n    if (object.type === \"Slider\") {\r\n      onObjectChange({ ...object, value: [object.min, object.max] })\r\n    }\r\n    else {\r\n      onObjectChange({ ...object, checked: false });\r\n    }\r\n  }\r\n  return (\r\n    <Grid item sm>\r\n      <Chip\r\n        size=\"medium\"\r\n        style={{ width: \"100%\", marginTop: 5, marginRight: 5 }}\r\n        label={value}\r\n        onDelete={handleDelete}\r\n        color=\"secondary\"\r\n      />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport function FilterChips({\r\n  objects,\r\n  onObjectsChange,\r\n}) {\r\n  function handleSliderFilterChange(index, newFilter) {\r\n    let newObjects = objects.splice(0);\r\n    newObjects[index] = newFilter;\r\n    onObjectsChange(newObjects);\r\n  }\r\n  function handleCategoryFilterChange(index, newFilter) {\r\n    let newObjects = objects;\r\n    newObjects[index].items.data = newFilter;\r\n    onObjectsChange(newObjects);\r\n  }\r\n  function handleFilterChange(index, newFilter) {\r\n    let newObjects = objects;\r\n    newObjects[index].items = newFilter;\r\n    onObjectsChange(newObjects);\r\n  }\r\n\r\n  return (\r\n    <Grid id=\"chipsContainer\" sm container>\r\n      {\r\n        objects.map((filter, index) => {\r\n          if (filter.type === \"Slider\") {\r\n            if ((filter.min !== filter.value[0] || filter.max != filter.value[1]))\r\n              return <CustomChip\r\n                object={filter}\r\n                value={\"Showing \" + filter.value[0] + filter.valueType + \" to \" + filter.value[1] + filter.valueType}\r\n                onObjectChange={newFilter => handleSliderFilterChange(index, newFilter)}\r\n              />\r\n          }\r\n          else if (filter.type === \"List\" && filter.title === \"Category\")\r\n            return <GenerateChips\r\n              object={filter.items.data}\r\n              onObjectChange={newFilter => handleCategoryFilterChange(index, newFilter)}\r\n            />\r\n          else {\r\n            return <GenerateChips\r\n              object={filter.items}\r\n              onObjectChange={newFilter => handleFilterChange(index, newFilter)}\r\n            />\r\n          }\r\n        })\r\n      }\r\n    </Grid>\r\n  )\r\n}\r\n\r\nfunction GenerateChips({ object, onObjectChange }) {\r\n  function handleChange(index, newItem) {\r\n    let newObject = object;\r\n    newObject[index] = newItem;\r\n    onObjectChange(newObject);\r\n  }\r\n  function handleCategoryChange(index, newItem) {\r\n    let newObject = object;\r\n    newObject[index].items = newItem;\r\n    onObjectChange(newObject);\r\n  }\r\n  return (\r\n    object.map((item, index) => (\r\n      <>\r\n        {item.checked && (\r\n          <CustomChip\r\n            object={item}\r\n            value={item.title}\r\n            onObjectChange={(newItem) => handleChange(index, newItem)}\r\n          />\r\n        )}\r\n        {(item.items !== undefined)\r\n          ? item.items.length !== 0\r\n            ? <GenerateChips\r\n              object={item.items}\r\n              onObjectChange={(newItem) => handleCategoryChange(index, newItem)}\r\n            />\r\n            : null : null\r\n        }\r\n      </>\r\n    ))\r\n  )\r\n}\r\n\r\nexport function CategoryChips({ object, onObjectChange }) {\r\n  return (\r\n    <Grid container sm>\r\n      <GenerateChips object={object.data} onObjectChange={newData => onObjectChange({ ...object, data: newData })} />\r\n    </Grid>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}