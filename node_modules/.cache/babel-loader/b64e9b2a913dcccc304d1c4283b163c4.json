{"ast":null,"code":"var _jsxFileName = \"D:\\\\program\\\\java\\\\coursebucket\\\\src\\\\AdminPanel\\\\CategoryComponent.js\",\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Grid, IconButton, Typography, TextField } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    height: 216,\n    flexGrow: 1,\n    maxWidth: 400\n  },\n  iconContainer: {\n    opacity: \"0.3\",\n    '&:hover': {\n      opacity: 1\n    }\n  },\n  textField: {\n    width: \"100%\"\n  }\n});\nconst treeData = [{\n  nodeId: \"1\",\n  label: \"Application\",\n  children: []\n}, {\n  nodeId: \"2\",\n  label: \"Documents\",\n  children: [{\n    nodeId: \"3\",\n    label: \"a\",\n    children: [{\n      nodeId: \"4\",\n      label: \"b\",\n      children: []\n    }]\n  }]\n}, {\n  nodeId: \"5\",\n  label: \"a\",\n  children: [{\n    nodeId: \"6\",\n    label: \"b\",\n    children: [{\n      nodeId: \"7\",\n      label: \"a\",\n      children: [{\n        nodeId: \"8\",\n        label: \"b\",\n        children: []\n      }]\n    }, {\n      nodeId: \"9\",\n      label: \"a\",\n      children: [{\n        nodeId: \"10\",\n        label: \"b\",\n        children: []\n      }]\n    }]\n  }]\n}, {\n  nodeId: \"11\",\n  label: \"a\",\n  children: [{\n    nodeId: \"12\",\n    label: \"b\",\n    children: []\n  }]\n}];\nexport default function MultiSelectTreeView() {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  const classes = useStyles();\n\n  function PrintClickedLabel(event) {\n    //console.log(event.target.textContent)\n    console.log('print label : ' + event); //{onLabelClick = {()=>PrintClickedLabel(this.props.label)}}\n  }\n\n  function onTickClicked(nodeId, newData) {\n    console.log(nodeId + \" \" + newData);\n    setTextField(0);\n  }\n\n  function onCancelClicked() {\n    setTextField(0);\n  }\n\n  function AddData({\n    data\n  }) {\n    _s2();\n\n    var _s = $RefreshSig$();\n\n    const [showTextField, setTextField] = useState(0);\n    const [textFieldData, setTextFieldData] = useState(\"\");\n\n    function handleTextFieldDataChange(event) {\n      setTextFieldData(event.target.value);\n    }\n\n    function OnUpdateClicked(nodeId) {\n      //console.log(nodeId)\n      setTextField(nodeId);\n      setTextFieldData; //setTextField(event.target.id)\n    } //console.log(data)\n\n\n    if (data.length === 0) return null;else return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.map(_s(item => {\n        _s();\n\n        return /*#__PURE__*/_jsxDEV(TreeItem, {\n          className: \"category-tree-item\",\n          nodeId: item.nodeId,\n          label: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [!(showTextField === item.nodeId) && /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                container: true,\n                sm: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\" \", item.label, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                className: classes.iconContainer,\n                children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(UpdateIcon, {\n                    onClick: () => OnUpdateClicked(item.nodeId)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 55\n            }, this), showTextField === item.nodeId && /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"row\",\n              alignItems: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                container: true,\n                sm: true,\n                children: [React.useEffect(() => {\n                  setTextFieldData(item.label);\n                }, []), /*#__PURE__*/_jsxDEV(TextField, {\n                  className: classes.textField,\n                  id: \"outlined-basic\",\n                  label: \"Category Name\",\n                  variant: \"outlined\",\n                  defaultValue: item.label,\n                  onChange: handleTextFieldDataChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                className: classes.iconContainer,\n                children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(CheckCircleOutlineIcon, {\n                    onClick: () => onTickClicked(item.nodeId, textFieldData)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(CancelIcon, {\n                    onClick: onCancelClicked\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 54\n            }, this)]\n          }, void 0, true),\n          children: /*#__PURE__*/_jsxDEV(AddData, {\n            data: item.children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)\n        }, item.nodeId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this);\n      }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"))\n    }, void 0, false);\n  }\n\n  _s2(AddData, \"fteYme2bKWswX0eLEWON6LyCFM8=\");\n\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    className: classes.root,\n    defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 28\n    }, this),\n    defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 26\n    }, this),\n    multiSelect: true,\n    onNodeSelect: PrintClickedLabel,\n    children: /*#__PURE__*/_jsxDEV(AddData, {\n      data: treeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(MultiSelectTreeView, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = MultiSelectTreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectTreeView\");","map":{"version":3,"sources":["D:/program/java/coursebucket/src/AdminPanel/CategoryComponent.js"],"names":["React","useState","makeStyles","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","Grid","IconButton","Typography","TextField","AddCircleIcon","DeleteForeverIcon","UpdateIcon","CheckCircleOutlineIcon","CancelIcon","useStyles","root","height","flexGrow","maxWidth","iconContainer","opacity","textField","width","treeData","nodeId","label","children","MultiSelectTreeView","classes","PrintClickedLabel","event","console","log","onTickClicked","newData","setTextField","onCancelClicked","AddData","data","showTextField","textFieldData","setTextFieldData","handleTextFieldDataChange","target","value","OnUpdateClicked","length","map","item","useEffect"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Grid, IconButton, Typography, TextField } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 216,\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n  iconContainer: {\r\n    opacity: \"0.3\",\r\n    '&:hover': {\r\n      opacity: 1,\r\n    }\r\n  },\r\n  textField: {\r\n    width: \"100%\"\r\n  }\r\n});\r\nconst treeData = [\r\n  {\r\n    nodeId: \"1\",\r\n    label: \"Application\",\r\n    children: [],\r\n  },\r\n  {\r\n    nodeId: \"2\",\r\n    label: \"Documents\",\r\n    children: [\r\n      {\r\n        nodeId: \"3\",\r\n        label: \"a\",\r\n        children: [\r\n          {\r\n            nodeId: \"4\",\r\n            label: \"b\",\r\n            children: [],\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    nodeId: \"5\",\r\n    label: \"a\",\r\n    children: [\r\n      {\r\n        nodeId: \"6\",\r\n        label: \"b\",\r\n        children: [\r\n          {\r\n            nodeId: \"7\",\r\n            label: \"a\",\r\n            children: [\r\n              {\r\n                nodeId: \"8\",\r\n                label: \"b\",\r\n                children: [],\r\n              },\r\n            ]\r\n          }, {\r\n            nodeId: \"9\",\r\n            label: \"a\",\r\n            children: [\r\n              {\r\n                nodeId: \"10\",\r\n                label: \"b\",\r\n                children: [],\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    nodeId: \"11\",\r\n    label: \"a\",\r\n    children: [\r\n      {\r\n        nodeId: \"12\",\r\n        label: \"b\",\r\n        children: [],\r\n      },\r\n    ]\r\n  },\r\n]\r\n\r\nexport default function MultiSelectTreeView() {\r\n  const classes = useStyles();\r\n  \r\n  \r\n  function PrintClickedLabel(event) {\r\n    //console.log(event.target.textContent)\r\n    console.log('print label : ' + event)\r\n\r\n    //{onLabelClick = {()=>PrintClickedLabel(this.props.label)}}\r\n  }\r\n\r\n  function onTickClicked(nodeId, newData){\r\n    console.log(nodeId+\" \"+newData);\r\n    setTextField(0)\r\n  }\r\n  function onCancelClicked(){\r\n    setTextField(0)\r\n  }\r\n  function AddData({ data }) {\r\n    const [showTextField, setTextField] = useState(0);\r\n    const [textFieldData, setTextFieldData] = useState(\"\");\r\n    function handleTextFieldDataChange(event){\r\n      setTextFieldData(event.target.value);\r\n    }\r\n    function OnUpdateClicked(nodeId) {\r\n      //console.log(nodeId)\r\n      setTextField(nodeId)\r\n      setTextFieldData\r\n      //setTextField(event.target.id)\r\n    }\r\n    //console.log(data)\r\n    if (data.length === 0) return null;\r\n    else return (\r\n      <>\r\n        {\r\n          data.map(item => (\r\n            <TreeItem className=\"category-tree-item\" key={item.nodeId} nodeId={item.nodeId} label={\r\n              <>\r\n                {!(showTextField === item.nodeId) && (<Grid container direction=\"row\" alignItems=\"center\">\r\n                  <Grid item container sm>\r\n                    <Typography> {item.label} </Typography>\r\n                  </Grid>\r\n                  <Grid item className={classes.iconContainer}>\r\n                    <IconButton>\r\n                      <UpdateIcon onClick={() => OnUpdateClicked(item.nodeId)} />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <DeleteForeverIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <AddCircleIcon />\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>)}\r\n                {(showTextField === item.nodeId) && (<Grid container direction=\"row\" alignItems=\"center\">\r\n                  <Grid item container sm>\r\n                    {React.useEffect(()=>{setTextFieldData(item.label)},[])}\r\n                    <TextField\r\n                      className={classes.textField}\r\n                      id=\"outlined-basic\"\r\n                      label=\"Category Name\"\r\n                      variant=\"outlined\"\r\n                      defaultValue={item.label}\r\n                      onChange={handleTextFieldDataChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item className={classes.iconContainer}>\r\n                    <IconButton>\r\n                      <CheckCircleOutlineIcon onClick={() => onTickClicked(item.nodeId, textFieldData)} />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <CancelIcon onClick={onCancelClicked}/>\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>)}\r\n              </>\r\n            }\r\n            >\r\n              <AddData data={item.children} />\r\n            </TreeItem>\r\n          ))\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <TreeView\r\n      className={classes.root}\r\n      defaultCollapseIcon={<ExpandMoreIcon />}\r\n      defaultExpandIcon={<ChevronRightIcon />}\r\n      multiSelect\r\n      onNodeSelect={PrintClickedLabel}\r\n    >\r\n      <AddData data={treeData} />\r\n\r\n    </TreeView>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}