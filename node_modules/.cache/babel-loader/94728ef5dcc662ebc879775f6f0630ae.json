{"ast":null,"code":"var _jsxFileName = \"D:\\\\program\\\\java\\\\coursebucket\\\\src\\\\tools\\\\FileUploader.js\",\n    _s = $RefreshSig$();\n\nimport { Grid } from '@material-ui/core';\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FileUploader(props) {\n  _s();\n\n  // const handlePreviewIcon = (fileObject, classes) => {\n  //   const { type } = fileObject.file\n  //   const iconProps = {\n  //     className: classes.image,\n  //   }\n  //   if (type.startsWith(\"video/\")) return <Theaters {...iconProps} />\n  //   // if (type.startsWith(\"audio/\")) return <AudioTrack {...iconProps} />\n  //   switch (type) {\n  //     case \"application/msword\":\n  //     case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n  //       return <Description {...iconProps} />\n  //     case \"application/pdf\":\n  //       return <PictureAsPdf {...iconProps} />\n  //     default:\n  //       return <AttachFile {...iconProps} />\n  //   }\n  // }\n  const [fileObjects, setFileObjects] = useState([]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(DropzoneAreaBase // Icon={<Icon><VideoCall /></Icon>}\n    , {\n      fileObjects: fileObjects,\n      dropzoneText: \"Drop a file here or click here\",\n      showFileNames: true,\n      showFileNamesInPreview: true,\n      maxFileSize: 100000000,\n      styles: {\n        position: \"relative\"\n      },\n      onAdd: newFileObjs => {\n        console.log('onAdd', newFileObjs);\n        setFileObjects([].concat(fileObjects, newFileObjs));\n      },\n      onDelete: deleteFileObj => {\n        console.log('onDelete', deleteFileObj);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FileUploader, \"u6NaQWNfpmW0NQFXnQzbl1n7/nE=\");\n\n_c = FileUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"sources":["D:/program/java/coursebucket/src/tools/FileUploader.js"],"names":["Grid","DropzoneAreaBase","React","useState","FileUploader","props","fileObjects","setFileObjects","position","newFileObjs","console","log","concat","deleteFileObj"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAClC;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA,2BACE,QAAC,gBAAD,CACE;AADF;AAEE,MAAA,WAAW,EAAEG,WAFf;AAGE,MAAA,YAAY,EAAC,gCAHf;AAIE,MAAA,aAAa,MAJf;AAKE,MAAA,sBAAsB,MALxB;AAME,MAAA,WAAW,EAAE,SANf;AAOE,MAAA,MAAM,EAAE;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAPV;AASE,MAAA,KAAK,EAAEC,WAAW,IAAI;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,WAArB;AACAF,QAAAA,cAAc,CAAC,GAAGK,MAAH,CAAUN,WAAV,EAAuBG,WAAvB,CAAD,CAAd;AACD,OAZH;AAaE,MAAA,QAAQ,EAAEI,aAAa,IAAI;AACzBH,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,aAAxB;AACD;AAfH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA5CeT,Y;;KAAAA,Y","sourcesContent":["import { Grid } from '@material-ui/core';\r\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\r\nimport React, { useState } from 'react';\r\n\r\nexport function FileUploader(props) {\r\n  // const handlePreviewIcon = (fileObject, classes) => {\r\n  //   const { type } = fileObject.file\r\n  //   const iconProps = {\r\n  //     className: classes.image,\r\n  //   }\r\n\r\n  //   if (type.startsWith(\"video/\")) return <Theaters {...iconProps} />\r\n  //   // if (type.startsWith(\"audio/\")) return <AudioTrack {...iconProps} />\r\n\r\n  //   switch (type) {\r\n  //     case \"application/msword\":\r\n  //     case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\r\n  //       return <Description {...iconProps} />\r\n  //     case \"application/pdf\":\r\n  //       return <PictureAsPdf {...iconProps} />\r\n  //     default:\r\n  //       return <AttachFile {...iconProps} />\r\n  //   }\r\n  // }\r\n\r\n  const [fileObjects, setFileObjects] = useState([]);\r\n\r\n  return (\r\n    <Grid item>\r\n      <DropzoneAreaBase\r\n        // Icon={<Icon><VideoCall /></Icon>}\r\n        fileObjects={fileObjects}\r\n        dropzoneText=\"Drop a file here or click here\"\r\n        showFileNames\r\n        showFileNamesInPreview\r\n        maxFileSize={100000000}\r\n        styles={{ position: \"relative\" }}\r\n\r\n        onAdd={newFileObjs => {\r\n          console.log('onAdd', newFileObjs);\r\n          setFileObjects([].concat(fileObjects, newFileObjs));\r\n        }}\r\n        onDelete={deleteFileObj => {\r\n          console.log('onDelete', deleteFileObj);\r\n        }}\r\n      />\r\n    </Grid>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}