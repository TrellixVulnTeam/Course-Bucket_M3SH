{"ast":null,"code":"var _jsxFileName = \"D:\\\\program\\\\java\\\\coursebucket\\\\src\\\\AdminPanel\\\\CategoryComponent.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Grid, IconButton, Typography, TextField } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    height: 216,\n    flexGrow: 1,\n    maxWidth: 400\n  },\n  iconContainer: {\n    opacity: \"0.3\",\n    '&:hover': {\n      opacity: 1\n    }\n  },\n  textField: {\n    width: \"100%\"\n  }\n});\nconst initTreeData = [{\n  nodeId: \"1\",\n  label: \"Application\",\n  children: []\n}, {\n  nodeId: \"2\",\n  label: \"Documents\",\n  children: [{\n    nodeId: \"3\",\n    label: \"a\",\n    children: [{\n      nodeId: \"4\",\n      label: \"b\",\n      children: []\n    }]\n  }]\n}, {\n  nodeId: \"5\",\n  label: \"a\",\n  children: [{\n    nodeId: \"6\",\n    label: \"b\",\n    children: [{\n      nodeId: \"7\",\n      label: \"a\",\n      children: [{\n        nodeId: \"8\",\n        label: \"b\",\n        children: []\n      }]\n    }, {\n      nodeId: \"9\",\n      label: \"a\",\n      children: [{\n        nodeId: \"10\",\n        label: \"b\",\n        children: []\n      }]\n    }]\n  }]\n}, {\n  nodeId: \"11\",\n  label: \"a\",\n  children: [{\n    nodeId: \"12\",\n    label: \"b\",\n    children: []\n  }]\n}];\nexport default function MultiSelectTreeView() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles();\n  const [treeData, setTreeData] = useState(initTreeData);\n\n  function PrintClickedLabel(event) {\n    //console.log(event.target.textContent)\n    console.log('print label : ' + event); //{onLabelClick = {()=>PrintClickedLabel(this.props.label)}}\n  }\n\n  function DFS(array, nodeId, newLabel) {\n    if (array.length === 0) return;\n    array.map(item => {\n      if (item.nodeId === nodeId) {\n        item.label = newLabel;\n        return;\n      }\n\n      DFS(item.children, nodeId, newLabel);\n    });\n  }\n\n  function updateLabel(nodeId, newLabel) {\n    let array = treeData;\n    DFS(array, nodeId, newLabel);\n    setTreeData(array);\n  }\n\n  function AddData({\n    data\n  }) {\n    _s();\n\n    const [showTextField, setTextField] = useState(0);\n    const [textFieldData, setTextFieldData] = useState(\"\");\n\n    function handleTextFieldDataChange(event) {\n      setTextFieldData(event.target.value);\n    }\n\n    function OnUpdateClicked(nodeId, label) {\n      //console.log(nodeId)\n      setTextField(nodeId);\n      setTextFieldData(label); //setTextField(event.target.id)\n    }\n\n    function onTickClicked(nodeId, newData) {\n      console.log(nodeId + \" \" + newData);\n      updateLabel(nodeId, newData);\n      setTextField(0);\n    }\n\n    function onCancelClicked() {\n      setTextField(0);\n    } //console.log(data)\n\n\n    if (data.length === 0) return null;else return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(TreeItem, {\n        className: \"category-tree-item\",\n        nodeId: item.nodeId,\n        label: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [!(showTextField === item.nodeId) && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              container: true,\n              sm: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                children: [\" \", item.label, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.iconContainer,\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(UpdateIcon, {\n                  onClick: () => OnUpdateClicked(item.nodeId, item.label)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {\n                  onClick: () => item.children = []\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 55\n          }, this), showTextField === item.nodeId && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              container: true,\n              sm: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                className: classes.textField,\n                id: \"outlined-basic\",\n                label: \"Category Name\",\n                variant: \"outlined\",\n                defaultValue: item.label,\n                onChange: handleTextFieldDataChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.iconContainer,\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(CheckCircleOutlineIcon, {\n                  onClick: () => {\n                    item.label = textFieldData;\n                    setTextField(0);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(CancelIcon, {\n                  onClick: onCancelClicked\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 54\n          }, this)]\n        }, void 0, true),\n        children: /*#__PURE__*/_jsxDEV(AddData, {\n          data: item.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }, this)\n      }, item.nodeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this))\n    }, void 0, false);\n  }\n\n  _s(AddData, \"fteYme2bKWswX0eLEWON6LyCFM8=\");\n\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    className: classes.root,\n    defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 28\n    }, this),\n    defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 26\n    }, this),\n    multiSelect: true,\n    onNodeSelect: PrintClickedLabel,\n    children: /*#__PURE__*/_jsxDEV(AddData, {\n      data: treeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MultiSelectTreeView, \"jNu2zJlaeIoOLSMEs66aUU7uMH0=\", false, function () {\n  return [useStyles];\n});\n\n_c = MultiSelectTreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectTreeView\");","map":{"version":3,"sources":["D:/program/java/coursebucket/src/AdminPanel/CategoryComponent.js"],"names":["React","useState","makeStyles","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","Grid","IconButton","Typography","TextField","AddCircleIcon","DeleteForeverIcon","UpdateIcon","CheckCircleOutlineIcon","CancelIcon","useStyles","root","height","flexGrow","maxWidth","iconContainer","opacity","textField","width","initTreeData","nodeId","label","children","MultiSelectTreeView","classes","treeData","setTreeData","PrintClickedLabel","event","console","log","DFS","array","newLabel","length","map","item","updateLabel","AddData","data","showTextField","setTextField","textFieldData","setTextFieldData","handleTextFieldDataChange","target","value","OnUpdateClicked","onTickClicked","newData","onCancelClicked"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Grid, IconButton, Typography, TextField } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 216,\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n  iconContainer: {\r\n    opacity: \"0.3\",\r\n    '&:hover': {\r\n      opacity: 1,\r\n    }\r\n  },\r\n  textField: {\r\n    width: \"100%\"\r\n  }\r\n});\r\nconst initTreeData = [\r\n  {\r\n    nodeId: \"1\",\r\n    label: \"Application\",\r\n    children: [],\r\n  },\r\n  {\r\n    nodeId: \"2\",\r\n    label: \"Documents\",\r\n    children: [\r\n      {\r\n        nodeId: \"3\",\r\n        label: \"a\",\r\n        children: [\r\n          {\r\n            nodeId: \"4\",\r\n            label: \"b\",\r\n            children: [],\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    nodeId: \"5\",\r\n    label: \"a\",\r\n    children: [\r\n      {\r\n        nodeId: \"6\",\r\n        label: \"b\",\r\n        children: [\r\n          {\r\n            nodeId: \"7\",\r\n            label: \"a\",\r\n            children: [\r\n              {\r\n                nodeId: \"8\",\r\n                label: \"b\",\r\n                children: [],\r\n              },\r\n            ]\r\n          }, {\r\n            nodeId: \"9\",\r\n            label: \"a\",\r\n            children: [\r\n              {\r\n                nodeId: \"10\",\r\n                label: \"b\",\r\n                children: [],\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    nodeId: \"11\",\r\n    label: \"a\",\r\n    children: [\r\n      {\r\n        nodeId: \"12\",\r\n        label: \"b\",\r\n        children: [],\r\n      },\r\n    ]\r\n  },\r\n]\r\n\r\n\r\n\r\nexport default function MultiSelectTreeView() {\r\n  const classes = useStyles();\r\n  const [treeData, setTreeData] = useState(initTreeData);\r\n  \r\n  \r\n  function PrintClickedLabel(event) {\r\n    //console.log(event.target.textContent)\r\n    console.log('print label : ' + event)\r\n\r\n    //{onLabelClick = {()=>PrintClickedLabel(this.props.label)}}\r\n  }\r\n  function DFS(array, nodeId, newLabel){\r\n    if(array.length === 0) return;\r\n    array.map(item => {\r\n      if(item.nodeId === nodeId){\r\n        item.label = newLabel;\r\n        return;\r\n      }\r\n      DFS(item.children, nodeId, newLabel);\r\n    })\r\n  }\r\n  function updateLabel(nodeId, newLabel){\r\n    let array = treeData;\r\n    DFS(array, nodeId, newLabel);\r\n    setTreeData(array);\r\n  }\r\n\r\n  function AddData({ data }) {\r\n    const [showTextField, setTextField] = useState(0);\r\n    const [textFieldData, setTextFieldData] = useState(\"\");\r\n    \r\n    function handleTextFieldDataChange(event){\r\n      setTextFieldData(event.target.value);\r\n    }\r\n    function OnUpdateClicked(nodeId, label) {\r\n      //console.log(nodeId)\r\n      setTextField(nodeId)\r\n      setTextFieldData(label)\r\n      //setTextField(event.target.id)\r\n    }\r\n    function onTickClicked(nodeId, newData){\r\n      console.log(nodeId+\" \"+newData);\r\n      updateLabel(nodeId, newData);\r\n      setTextField(0)\r\n    }\r\n    function onCancelClicked(){\r\n      setTextField(0)\r\n    }\r\n    //console.log(data)\r\n    if (data.length === 0) return null;\r\n    else return (\r\n      <>\r\n        {\r\n          data.map(item => (\r\n            <TreeItem className=\"category-tree-item\" key={item.nodeId} nodeId={item.nodeId} label={\r\n              <>\r\n                {!(showTextField === item.nodeId) && (<Grid container direction=\"row\" alignItems=\"center\">\r\n                  <Grid item container sm>\r\n                    <Typography> {item.label} </Typography>\r\n                  </Grid>\r\n                  <Grid item className={classes.iconContainer}>\r\n                    <IconButton>\r\n                      <UpdateIcon onClick={() => OnUpdateClicked(item.nodeId, item.label)} />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <DeleteForeverIcon onClick = {() => item.children = [] }/>\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <AddCircleIcon />\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>)}\r\n                {(showTextField === item.nodeId) && (<Grid container direction=\"row\" alignItems=\"center\">\r\n                  <Grid item container sm>\r\n                    {/* {React.useEffect(()=>{setTextFieldData(item.label)},[])} */}\r\n                    <TextField\r\n                      className={classes.textField}\r\n                      id=\"outlined-basic\"\r\n                      label=\"Category Name\"\r\n                      variant=\"outlined\"\r\n                      defaultValue={item.label}\r\n                      onChange={handleTextFieldDataChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item className={classes.iconContainer}>\r\n                    <IconButton>\r\n                      <CheckCircleOutlineIcon onClick={() => {item.label = textFieldData; setTextField(0);}} />\r\n                      {/* <CheckCircleOutlineIcon onClick={() => onTickClicked(item.nodeId, textFieldData)} /> */}\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <CancelIcon onClick={onCancelClicked}/>\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>)}\r\n              </>\r\n            }\r\n            >\r\n              <AddData data={item.children} />\r\n            </TreeItem>\r\n          ))\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <TreeView\r\n      className={classes.root}\r\n      defaultCollapseIcon={<ExpandMoreIcon />}\r\n      defaultExpandIcon={<ChevronRightIcon />}\r\n      multiSelect\r\n      onNodeSelect={PrintClickedLabel}\r\n    >\r\n      <AddData data={treeData} />\r\n\r\n    </TreeView>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}