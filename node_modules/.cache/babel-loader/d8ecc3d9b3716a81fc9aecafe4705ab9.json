{"ast":null,"code":"var _jsxFileName = \"D:\\\\program\\\\java\\\\coursebucket\\\\src\\\\AdminPanel\\\\CategoryComponent.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Grid, IconButton, Typography, TextField } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    height: 216,\n    flexGrow: 1,\n    maxWidth: 400\n  },\n  iconContainer: {\n    opacity: \"0.3\",\n    '&:hover': {\n      opacity: 1\n    }\n  },\n  textField: {\n    width: \"100%\"\n  }\n});\nconst initTreeData = [{\n  nodeId: \"1\",\n  label: \"Application\",\n  children: []\n}, {\n  nodeId: \"2\",\n  label: \"Documents\",\n  children: [{\n    nodeId: \"3\",\n    label: \"a\",\n    children: [{\n      nodeId: \"4\",\n      label: \"b\",\n      children: []\n    }]\n  }]\n}, {\n  nodeId: \"5\",\n  label: \"a\",\n  children: [{\n    nodeId: \"6\",\n    label: \"b\",\n    children: [{\n      nodeId: \"7\",\n      label: \"a\",\n      children: [{\n        nodeId: \"8\",\n        label: \"b\",\n        children: []\n      }]\n    }, {\n      nodeId: \"9\",\n      label: \"a\",\n      children: [{\n        nodeId: \"10\",\n        label: \"b\",\n        children: []\n      }]\n    }]\n  }]\n}, {\n  nodeId: \"11\",\n  label: \"a\",\n  children: [{\n    nodeId: \"12\",\n    label: \"b\",\n    children: []\n  }]\n}];\nexport default function MultiSelectTreeView() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles();\n  const [showTextField, setTextField] = useState(0);\n  const [treeData, setTreeData] = useState(initTreeData);\n  console.log(treeData);\n  const boolean = false;\n  const [a, setA] = useState(boolean);\n\n  function PrintClickedLabel(event) {\n    //console.log(event.target.textContent)\n    console.log('print label : ' + event); //{onLabelClick = {()=>PrintClickedLabel(this.props.label)}}\n  }\n\n  function DFS(array, label) {\n    if (array.length === 0) return;\n    array.map((item, idx) => {\n      if (item.label === label) {\n        array.splice(idx, 1);\n        console.log(array);\n        return;\n      }\n\n      DFS(item.children, label);\n    });\n  }\n\n  function deleteItem(label) {\n    let array = treeData;\n    DFS(array, label);\n    array = array.filter(() => true);\n    setTreeData(array);\n  }\n\n  function AddData({\n    data\n  }) {\n    _s();\n\n    const [textFieldData, setTextFieldData] = useState(\"\");\n\n    function handleTextFieldDataChange(event) {\n      setTextFieldData(event.target.value);\n    }\n\n    function OnUpdateClicked(label) {\n      setTextField(label);\n      setTextFieldData(label);\n    }\n\n    function onCancelClicked() {\n      setTextField(0);\n    }\n\n    function timeout(delay) {\n      return new Promise(res => setTimeout(res, delay));\n    } //console.log(data)\n\n\n    if (data.length === 0) return null;else return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(TreeItem, {\n        className: \"category-tree-item\",\n        nodeId: item.label,\n        label: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [!(showTextField === item.label) && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              container: true,\n              sm: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                children: [\" \", item.label, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.iconContainer,\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(UpdateIcon, {\n                  onClick: () => OnUpdateClicked(item.label, item.label)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {\n                  onClick: () => {\n                    deleteItem(item.label);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {\n                  onClick: () => {\n                    let obj = {\n                      nodeId: \"100\",\n                      label: \"New category\",\n                      children: []\n                    };\n                    item.children = [...item.children, obj];\n                    OnUpdateClicked(\"New category\");\n                    console.log(showTextField);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 54\n          }, this), showTextField === item.label && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              container: true,\n              sm: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                className: classes.textField,\n                id: \"outlined-basic\",\n                label: \"Category Name\",\n                variant: \"outlined\",\n                defaultValue: item.label,\n                onChange: handleTextFieldDataChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.iconContainer,\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(CheckCircleOutlineIcon, {\n                  onClick: () => {\n                    item.label = textFieldData;\n                    setTextField(0);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                children: /*#__PURE__*/_jsxDEV(CancelIcon, {\n                  onClick: onCancelClicked\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 53\n          }, this)]\n        }, void 0, true),\n        children: /*#__PURE__*/_jsxDEV(AddData, {\n          data: item.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this)\n      }, item.label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this))\n    }, void 0, false);\n  }\n\n  _s(AddData, \"LdiSnfH3iICVhRQpXSFr/iQKTuQ=\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Category List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TreeView, {\n      className: classes.root,\n      defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 28\n      }, this),\n      defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 26\n      }, this),\n      multiSelect: true,\n      onNodeSelect: PrintClickedLabel,\n      children: /*#__PURE__*/_jsxDEV(AddData, {\n        data: treeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(MultiSelectTreeView, \"8utlvqM+JflXetFDdBJiNZp+h2U=\", false, function () {\n  return [useStyles];\n});\n\n_c = MultiSelectTreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectTreeView\");","map":{"version":3,"sources":["D:/program/java/coursebucket/src/AdminPanel/CategoryComponent.js"],"names":["React","useState","makeStyles","TreeView","ExpandMoreIcon","ChevronRightIcon","TreeItem","Grid","IconButton","Typography","TextField","AddCircleIcon","DeleteForeverIcon","UpdateIcon","CheckCircleOutlineIcon","CancelIcon","useStyles","root","height","flexGrow","maxWidth","iconContainer","opacity","textField","width","initTreeData","nodeId","label","children","MultiSelectTreeView","classes","showTextField","setTextField","treeData","setTreeData","console","log","boolean","a","setA","PrintClickedLabel","event","DFS","array","length","map","item","idx","splice","deleteItem","filter","AddData","data","textFieldData","setTextFieldData","handleTextFieldDataChange","target","value","OnUpdateClicked","onCancelClicked","timeout","delay","Promise","res","setTimeout","obj"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Grid, IconButton, Typography, TextField } from '@material-ui/core'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 216,\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n  iconContainer: {\r\n    opacity: \"0.3\",\r\n    '&:hover': {\r\n      opacity: 1,\r\n    }\r\n  },\r\n  textField: {\r\n    width: \"100%\"\r\n  }\r\n});\r\nconst initTreeData = [\r\n  {\r\n    nodeId: \"1\",\r\n    label: \"Application\",\r\n    children: [],\r\n  },\r\n  {\r\n    nodeId: \"2\",\r\n    label: \"Documents\",\r\n    children: [\r\n      {\r\n        nodeId: \"3\",\r\n        label: \"a\",\r\n        children: [\r\n          {\r\n            nodeId: \"4\",\r\n            label: \"b\",\r\n            children: [],\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    nodeId: \"5\",\r\n    label: \"a\",\r\n    children: [\r\n      {\r\n        nodeId: \"6\",\r\n        label: \"b\",\r\n        children: [\r\n          {\r\n            nodeId: \"7\",\r\n            label: \"a\",\r\n            children: [\r\n              {\r\n                nodeId: \"8\",\r\n                label: \"b\",\r\n                children: [],\r\n              },\r\n            ]\r\n          }, {\r\n            nodeId: \"9\",\r\n            label: \"a\",\r\n            children: [\r\n              {\r\n                nodeId: \"10\",\r\n                label: \"b\",\r\n                children: [],\r\n              },\r\n            ]\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    nodeId: \"11\",\r\n    label: \"a\",\r\n    children: [\r\n      {\r\n        nodeId: \"12\",\r\n        label: \"b\",\r\n        children: [],\r\n      },\r\n    ]\r\n  },\r\n]\r\n\r\n\r\n\r\nexport default function MultiSelectTreeView() {\r\n  const classes = useStyles();\r\n  const [showTextField, setTextField] = useState(0);\r\n  const [treeData, setTreeData] = useState(initTreeData);\r\n  console.log(treeData);\r\n  const boolean = false;\r\n  const [a, setA] = useState(boolean);\r\n  \r\n  function PrintClickedLabel(event) {\r\n    //console.log(event.target.textContent)\r\n    console.log('print label : ' + event)\r\n\r\n    //{onLabelClick = {()=>PrintClickedLabel(this.props.label)}}\r\n  }\r\n  function DFS(array, label){\r\n    if(array.length === 0) return;\r\n    array.map((item,idx) => {\r\n      if(item.label === label){\r\n        array.splice(idx,1);\r\n        console.log(array);\r\n        return;\r\n      }\r\n      DFS(item.children, label);\r\n    })\r\n  }\r\n  function deleteItem(label){\r\n    let array = treeData;\r\n    DFS(array, label);\r\n    array = array.filter(()=>true);\r\n    setTreeData(array);\r\n  }\r\n\r\n  function AddData({ data }) {\r\n    const [textFieldData, setTextFieldData] = useState(\"\");\r\n    \r\n    function handleTextFieldDataChange(event){\r\n      setTextFieldData(event.target.value);\r\n    }\r\n    function OnUpdateClicked(label) {\r\n      setTextField(label)\r\n      setTextFieldData(label)\r\n    }\r\n    function onCancelClicked(){\r\n      setTextField(0)\r\n    }\r\n    function timeout(delay) {\r\n      return new Promise(res => setTimeout(res, delay));\r\n    }\r\n    //console.log(data)\r\n    if (data.length === 0) return null;\r\n    else return (\r\n      <>\r\n        {\r\n          data.map(item => (\r\n            <TreeItem className=\"category-tree-item\" key={item.label} nodeId={item.label} label={\r\n              <>\r\n                {!(showTextField === item.label) && (<Grid container direction=\"row\" alignItems=\"center\">\r\n                  <Grid item container sm>\r\n                    <Typography> {item.label} </Typography>\r\n                  </Grid>\r\n                  <Grid item className={classes.iconContainer}>\r\n                    <IconButton>\r\n                      <UpdateIcon onClick={() => OnUpdateClicked(item.label, item.label)} />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <DeleteForeverIcon onClick = {() => {deleteItem(item.label)}}/>\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <AddCircleIcon onClick = {() => {\r\n                        let obj = {nodeId: \"100\", label: \"New category\", children:[]};\r\n                        item.children = [...item.children, obj]; \r\n                        OnUpdateClicked(\"New category\");\r\n                        console.log(showTextField);\r\n                      }} />\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>)}\r\n                {(showTextField === item.label) && (<Grid container direction=\"row\" alignItems=\"center\">\r\n                  <Grid item container sm>\r\n                    {/* {React.useEffect(()=>{setTextFieldData(item.label)},[])} */}\r\n                    <TextField\r\n                      className={classes.textField}\r\n                      id=\"outlined-basic\"\r\n                      label=\"Category Name\"\r\n                      variant=\"outlined\"\r\n                      defaultValue={item.label}\r\n                      onChange={handleTextFieldDataChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item className={classes.iconContainer}>\r\n                    <IconButton>\r\n                      <CheckCircleOutlineIcon onClick={() => {item.label = textFieldData; setTextField(0);}} />\r\n                      {/* <CheckCircleOutlineIcon onClick={() => onTickClicked(item.nodeId, textFieldData)} /> */}\r\n                    </IconButton>\r\n                    <IconButton>\r\n                      <CancelIcon onClick={onCancelClicked}/>\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>)}\r\n              </>\r\n            }\r\n            >\r\n              <AddData data={item.children} />\r\n            </TreeItem>\r\n          ))\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n    <h3>Category List</h3>\r\n    <TreeView\r\n      className={classes.root}\r\n      defaultCollapseIcon={<ExpandMoreIcon />}\r\n      defaultExpandIcon={<ChevronRightIcon />}\r\n      multiSelect\r\n      onNodeSelect={PrintClickedLabel}\r\n    >\r\n      <AddData data={treeData} />\r\n\r\n    </TreeView>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}